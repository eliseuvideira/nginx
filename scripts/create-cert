#!/usr/bin/env bash

set -e

script_name="$0"
script_dir="$(realpath "$(dirname "$0")")"

root_dir="$(realpath "$script_dir/..")"

compose_filename="$root_dir/docker-compose.yml"
nginx_dir="$root_dir/nginx"
nginx_domains_dir="$root_dir/nginx/domains"
certbot_dir="$root_dir/certbot"

usage() {
  cat <<__EOF__
Usage: 
  $script_name DOMAIN EMAIL PROXY

Where:
  DOMAIN   domain to create certificate       subdomain.domain.com
  EMAIL    email to authenticate letsencrypt  example@email.com
  PROXY    url to proxy                       http://localhost:8000

Example:
  $script_name subdomain.domain.com example@email.com http://localhost:8000
__EOF__
}

exit_with_error() {
  cat <<__EOF__
Error:
  $1
__EOF__
  echo
  usage
  exit 1
}

if [ "$#" != "3" ]; then
  exit_with_error "Invalid number of parameters"
fi

domain="$1"
email="$2"
proxy="$3"

regex_domain="^([a-z0-9-]{1,63}\.)+[a-z]{2,63}$"
regex_email="^[a-z0-9+_.-]+@[a-z0-9.-]+$"
regex_url="https?://[^ ]+"

if [[ ! "$domain" =~ $regex_domain ]]; then
  exit_with_error "Invalid domain $domain"
fi

if [[ ! "$email" =~ $regex_email ]]; then
  exit_with_error "Invalid email $email"
fi

if [[ ! "$proxy" =~ $regex_url ]]; then
  exit_with_error "Invalid url $proxy"
fi

sudo mkdir -p "$nginx_domains_dir"

domain_conf_filename="$nginx_domains_dir/$domain.conf"

cat <<__EOF__ | sudo tee "$domain_conf_filename"
server {
  listen 80;
  listen [::]:80;

  server_name $domain;

  location /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }
}
__EOF__

docker-compose -f "$compose_filename" exec nginx nginx -t

if [ "$?" != "0" ]; then
  sudo rm -f "$domain_conf_filename"
  sudo chown "$USER:$USER" -R "$nginx_dir"
  sudo chown "$USER:$USER" -R "$certbot_dir"
  exit_with_error "Invalid domain nginx config, stopping"
fi

docker-compose -f "$compose_filename" exec nginx nginx -s reload

docker-compose -f "$compose_filename" exec certbot certbot certonly \
  --webroot \
  -w /var/www/certbot \
  --email "$email" \
  -d "$domain" \
  --rsa-key-size 4096 \
  --agree-tos \
  --non-interactive

if [ "$?" != "0" ]; then
  sudo rm -f "$domain_conf_filename"
  sudo chown "$USER:$USER" -R "$nginx_dir"
  sudo chown "$USER:$USER" -R "$certbot_dir"
  exit_with_error "Failed to certify domain, stopping"
fi

cat <<__EOF__ | sudo tee "$domain_conf_filename"
server {
  listen 80;
  listen [::]:80;

  server_name $domain;

  location /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }

  return 301 https://\$host\$request_uri;
}

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  server_name $domain;

  ssl_certificate /etc/letsencrypt/live/$domain/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/$domain/privkey.pem;

  client_max_body_size 0;
  client_body_buffer_size 128k;

  chunked_transfer_encoding on;

  location /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }

  location / {
    proxy_pass          $proxy;
    proxy_http_version  1.1;
    proxy_cache_bypass  \$http_upgrade;

    proxy_set_header Upgrade           \$http_upgrade;
    proxy_set_header Connection        "upgrade";
    proxy_set_header Host              \$host;
    proxy_set_header X-Real-IP         \$remote_addr;
    proxy_set_header X-Forwarded-For   \$proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-Host  \$host;
    proxy_set_header X-Forwarded-Port  \$server_port;    
  }

  include /etc/nginx/extra-conf.d/*.conf;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}
__EOF__

docker-compose -f "$compose_filename" exec nginx nginx -t

if [ "$?" != "0" ]; then
  sudo rm -f "$domain_conf_filename"
  sudo chown "$USER:$USER" -R "$nginx_dir"
  sudo chown "$USER:$USER" -R "$certbot_dir"
  exit_with_error "Invalid domain nginx config, stopping"
fi

docker-compose -f "$compose_filename" exec nginx nginx -s reload

sudo chown "$USER:$USER" -R "$nginx_dir"
sudo chown "$USER:$USER" -R "$certbot_dir"
